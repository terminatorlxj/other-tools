MODULE main
VAR
s00: {noncritical, trying, critical}; 
s01: {noncritical, trying, critical}; 
s02: {noncritical, trying, critical}; 
s03: {noncritical, trying, critical}; 
s04: {noncritical, trying, critical}; 
s05: {noncritical, trying, critical}; 
turn: 0..05;
pr00: process prc(s00, s01, turn, 00, 01); 
pr01: process prc(s01, s02, turn, 01, 02);
pr02: process prc(s02, s03, turn, 02, 03);
pr03: process prc(s03, s04, turn, 03, 04);
pr04: process prc(s04, s05, turn, 04, 05);
pr05: process prc(s05, s00, turn, 05, 00);
ASSIGN
init(turn) := 0;
FAIRNESS
!(s00 = critical)


SPEC AG((s01 = trying) -> AF (s01 = critical))  


MODULE prc(state0, state1, turn, turn0, turn1)
ASSIGN
init(state0) := noncritical;
next(state0) := 
case
   (state0 = noncritical) : {noncritical,trying};
   (state0 = trying) & (state1 = noncritical): critical;
   (state0 = trying) & (state1 = trying) & (turn = turn0):  critical;
   (state0 = critical) : {critical,noncritical};
   1: state0;
esac;
next(turn) :=
case
   turn = turn0 & state0 = noncritical: turn1;
   1: turn;
esac;
FAIRNESS
running
